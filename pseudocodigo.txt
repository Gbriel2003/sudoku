Algoritmo sudoku;
  Constantes:
    filas = 9;
    columnas = 9;
    cuadrantes = 3;
    pistas = 36;
    sol = 81;
  
  Tipo:
    matriz = arreglo[1..9, 1..9] de entero;
    pistasT = arreglo[1..9, 1..9] de booleano;
    cuadrante = arreglo[1..3, 1..3] de entero;
  
  Variables:
    tablero, solucion: matriz;
    pistasTablero: pistasT;
    nombre, nick: cadena;
    op: entero;

//Procedimiento para mostrar tablero

procedimiento mostrarTablero(tablero, solucion: matriz)
    variable i, j entero

    escribir('------------------------')
    para i de 1 hasta filas hacer
        para j de 1 hasta columnas hacer
            si pistasTablero[i,j] entonces
                cambiarColorTexto(lightcyan)
            sino si tablero[i,j] = 0 entonces
                cambiarColorTexto(white)
            sino
                cambiarColorTexto(lightcyan)
            fin si
            escribir(tablero[i,j], ' ')
            
            si j modulo cuadrantes = 0 entonces
                escribir('| ')
            fin si
        fin para
        escribir()
        
        si i modulo cuadrantes = 0 entonces
            escribir('------------------------')
        fin si
    fin para
    cambiarColorTexto(white)
fin procedimiento
  
//Procedimiento inicio pistas

  Procedimiento inicioPistas(var tablero, solucion: matriz)
    Variables:
      i, j, p: entero
    Inicio
      Para i <- 1 hasta filas hacer
        Para j <- 1 hasta columnas hacer
          tablero[i, j] <- 0
          solucion[i, j] <- 0
        Fin Para
      Fin Para
      
      // Cargar las pistas
      Para p <- 1 hasta pistas hacer
        tablero[1, 6] <- 1
        tablero[1, 7] <- 6
        tablero[1, 8] <- 9
        tablero[1, 9] <- 3
        tablero[2, 1] <- 6
        tablero[2, 3] <- 9
        tablero[2, 5] <- 3
        tablero[2, 8] <- 8
        tablero[3, 1] <- 3
        tablero[3, 5] <- 2
        tablero[3, 6] <- 9
        tablero[3, 7] <- 5
        tablero[4, 2] <- 9
        tablero[4, 4] <- 1
        tablero[4, 5] <- 7
        tablero[4, 9] <- 4
        tablero[5, 1] <- 7
        tablero[5, 3] <- 4
        tablero[5, 7] <- 1
        tablero[5, 9] <- 6
        tablero[6, 1] <- 1
        tablero[6, 5] <- 8
        tablero[6, 6] <- 2
        tablero[6, 8] <- 7
        tablero[7, 3] <- 3
        tablero[7, 4] <- 9
        tablero[7, 5] <- 1
        tablero[7, 9] <- 2
        tablero[8, 2] <- 2
        tablero[8, 5] <- 5
        tablero[8, 7] <- 3
        tablero[8, 9] <- 8
        tablero[9, 1] <- 8
        tablero[9, 2] <- 7
        tablero[9, 3] <- 5
        tablero[9, 4] <- 2
      Fin Para
    Fin Procedimiento

//FUNCION PARA VERIFICAR SI LA CELDA ES UNA PISTA

Función es_una_pista(i, j: entero): booleano
  Variables:
    resultado: booleano
  Inicio
    resultado <- tablero[i, j] <> 0
    devolver resultado
  Fin Función

//FUNCION PARA VERIFICAR QUE EL NUMERO ESTA DENTRO DEL RANGO PERMITIDO

Función rangoPermitido(num: entero): booleano
  Inicio
    Devolver (num >= 1) y (num <= 9)
  Fin Función

//FUNCION PARA SABER SI EXISTE EN LA FILA

Función ya_se_encuentra_en_la_fila(tablero: matriz; f, num: entero): booleano
  Variables:
    c: entero
  Inicio
    Para c <- 1 hasta columnas hacer
      Si tablero[f, c] = num entonces
        ya_se_encuentra_en_la_fila <- falso
        salir // Añadimos "salir" para salir del ciclo luego de encontrar el número
      Fin Si
    Fin Para
    ya_se_encuentra_en_la_fila <- verdadero
  Fin Función

//FUNCION PARA SABER SI EXISTE EN LA COLUMNA

Función ya_se_encuentra_en_la_columna(tablero: matriz; c, num: entero): booleano
  Variables:
    f: entero
  Inicio
    Para f <- 1 hasta filas hacer
      Si tablero[f, c] = num entonces
        ya_se_encuentra_en_la_columna <- falso
        salir // Añadimos "salir" para salir del ciclo luego de encontrar el número
      Fin Si
    Fin Para
    ya_se_encuentra_en_la_columna <- verdadero
  Fin Función

//FUNCION PARA SABER SI EXISTE EN EL CUADRANTE

Función ya_se_encuentra_en_el_cuadrante(tablero: matriz; filas, columnas, num: entero): booleano
  Variables:
    cuadrante_fila, cuadrante_columna, i, j: entero
  Inicio
    cuadrante_fila <- ((filas - 1) div cuadrantes) + 1
    cuadrante_columna <- ((columnas - 1) div cuadrantes) + 1
    Para i <- ((cuadrante_fila - 1) * cuadrantes) + 1 hasta cuadrante_fila * cuadrantes hacer
      Para j <- ((cuadrante_columna - 1) * cuadrantes) + 1 hasta cuadrante_columna * cuadrantes hacer
        Si tablero[i, j] = num entonces
          ya_se_encuentra_en_el_cuadrante <- falso
          salir // Añadimos "salir" para salir del ciclo luego de encontrar el número
        Fin Si
      Fin Para
    Fin Para
    ya_se_encuentra_en_el_cuadrante <- verdadero
  Fin Función

//PROCEDIMIENTO PARA PERMITIR QUE EL USUARIO INGRESE NUMEROS EN LAS CELDAS

procedimiento ingresarNumero(var tablero, solucion: matriz);
variables
	i, j, num: entero;
	completado, rendirse: booleano;
	resp: cadena;
inicio
	completado <- false;//INDICAMOS QUE EL JUEGO NO SE HA COMPLETADO TODAVIA
	rendirse <- false;
mientras no completado hacer
inicio
	cambiarColorTexto(amarillo);
	escribir('..........................................................');
	escribir('Seleccione la fila en la que desea agregar un numero.(1-9): ');
	leer(i);

	escribir('.............................................................');
	escribir('Seleccione la columna en la que desea agregar un numero.(1-9): ');
	leer(j);
	
	escribir('..............................');
	escribir('Ingrese un numero valido (1-9): ');
	leer(num);
	clrscr;
	
//VERIFICAMOS SI LA CELDA CORRESPONDE A UNA PISTA

	si solucion[i,j] <> 0 entonces
	inicio
		escribir('No se puede modificar una pista');
		salir;
	fin inicio;
	
	si rangoPermitido(num) entonces
		si ya_se_encuentra_en_la_fila(tablero, i, num) entonces
			si ya_se_encuentra_en_la_columna(tablero, j, num) entonces
				si ya_se_encuentra_en_el_cuadrante(tablero, i, j, num) entonces
				inicio
					cambioColorTexto(blanco);
					tablero[i,j] <- num;
					mostrarTablero(tablero, solucion);
				fin inicio
				sino
					escribir('Numero invalido. Por favor, ingrese un numero del 1 al 9.')
				sino
					escribir('Movimiento invalido. Por favor, intente nuevamente')
				sino
					escribir('Movimiento invalido. Por favor, intente nuevamente')
				sino
					escribir('Movimiento invalido. Por favor, intente nuevamente');

	mientras no rendirse hacer
	inicio
		cambioColorTexto(rojo);
		escribir('Deseas rendirte? (Si o no): ');
		leer(resp);
	
		si (resp = 'si') o (resp = 'no') entonces
			rendirse := verdadero;
	
		si resp = 'si' entonces
		inicio
			escribir('------------------------------');
			escribir('Te has rendido. Fin del juego!');
			escribir('------------------------------');
			escribir('La solucion del tablero es:');
			salir;
		fin inicio;
		fin si;

// VERIFICAMOS QUE EL TABLERO ESTE COMPLETADO

		completado <- verdadero;
			desde i <- 1 hasta filas hacer
				desde j <- 1 hasta columnas hacer
					si tablero[i,j] = 0 entonces
					completado <- falso;
	fin;
	cambioColorTexto(amarillo);
	escribir('--------------------------------------');
	escribir('FELICITACIONES! HA CULMINADO EL JUEGO.');
	escribir('--------------------------------------');
fin;

inicio

	cambioColorTexto(amarillo);
	escribir('---------------------------------------');
	escribir('BIENVENIDO A ULTIMATE SUDOKU EXPERIENCE');
	escribir('---------------------------------------');
	
	cambioColorTexto(blanco);
	escribir('---------------------------------------');
	escribir('INGRESE SU NOMBRE');
	escribir('NOMBRE: ');
	leer(nombre);
	escribir('---------------------------------------');
	escribir('INGRESE NICK/USUARIO');
	escribir('NICK/USUARIO: ');
	leer(nick);
	limpiar pantalla;
 
    escribir(' ------------------');
    escribir(' NOMBRE:  ', nombre);//SE LE MUESTRA AL USUARIO EL NOMBRE Y SU NICK/USUARIO INGRESADO
    escribir(' NICK/USUARIO: ', nick);
    escribir('------------------');
    limpiar pantalla;

	cambioColorTexto(amarillo);
    escribir('---------------------------------------');
    escribir('BIENVENIDO ', NICK, ' ');
    escribir('---------------------------------------');
    cambioColorTexto(blanco);
    repetir 
    escribir('---------------------------------------');
	escribir('POR FAVOR, ELIJA UNA OPCION');   //SE LE INDICA AL USUARIO SI DESEA JUGAR O NO
	escribir('1. jugar');
	escribir('2. salir');
	escribir('---------------------------------------');
	leer(op);
	limpiar pantalla;
	
	si op=1 entonces
		inicio
			cambioColorTexto(amarillo);
			escribir('---------------------------------------');
                        escribir('Que empiece el juego!');
			escribir('---------------------------------------');
			
			cambioColorTexto(blanco);
			inicioPistas(tablero, solucion);
			mostrarTablero(tablero, solucion);
			ingresarNumero(tablero, solucion);
			
		fin inicio
		sino si op <>2 entonces
			escribir('la opcion selecionada es invalida, por favor seleccione una opcion valida.');
		hasta op=2;
		
		inicio
			cambioColorTexto(amarillo);
			escribir('----------------------------------------');
			escribir('Gracias por su visita, hasta pronto');
			escribir('----------------------------------------');
	        fin;
  
  
fin algoritmo.

